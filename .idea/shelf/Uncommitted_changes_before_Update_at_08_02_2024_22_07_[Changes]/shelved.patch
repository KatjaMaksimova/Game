Index: main_cycle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport os\r\nimport sys\r\n\r\n\r\ndef game():\r\n    pygame.init()\r\n    width, height = size = 1200, 600\r\n    screen = pygame.display.set_mode(size)\r\n    sprite_width = sprite_height = 60  # last 75\r\n    FPS = 60\r\n\r\n    def load_level(num_of_level):\r\n        with open(f\"data/levels/{num_of_level}.txt\", 'r') as file:\r\n            level_map = [line.strip() for line in file]\r\n        return level_map\r\n\r\n    def load_image(name):\r\n        fullname = os.path.join('data/sprites/', name)\r\n        if not os.path.isfile(fullname):\r\n            print(f\"Файл с изображением '{fullname}' не найден\")\r\n            sys.exit()\r\n        image = pygame.image.load(fullname)\r\n        return image\r\n\r\n    other_image = {'kwall': load_image('killer.png'),\r\n                   'wall': load_image('barrier.png'),\r\n                   'sky': load_image('sky.png'),\r\n                   'ground': load_image('ground.png'),\r\n                   'groundblock': load_image('ground_block.png'),\r\n                   'live_yes': load_image('live_yes.png'),\r\n                   'live_no': load_image('live_no.png'),\r\n                   'monster': load_image('monster0.png'),\r\n                   'monster2': load_image('monster1.png')}\r\n\r\n    money_image = [load_image(f'money{i}.png') for i in range(1, 7)]\r\n    player_image = [load_image('dragon1.png'), load_image('dragon2.png')]\r\n    cnt_live_image = [load_image('live_yes.png'), load_image('live_no.png')]\r\n\r\n    #ground_group = pygame.sprite.Group()\r\n    #sky_group = pygame.sprite.Group()\r\n    all_sprites = pygame.sprite.Group()\r\n    move_sprites = pygame.sprite.Group()\r\n    money_group = pygame.sprite.Group()\r\n    killer_group = pygame.sprite.Group()\r\n    player_group = pygame.sprite.Group()\r\n    wall_group = pygame.sprite.Group()  # препятствия в виде поленьев и земляные платформы\r\n    monster_group = pygame.sprite.Group()\r\n    hearts_list = []\r\n\r\n    def generate_text(cnt, sc):\r\n        font = pygame.font.Font('data/pixel_font.ttf', 20)\r\n        text = font.render(f\"Money: {cnt}\", True, (40, 40, 40))\r\n        place = text.get_rect()\r\n        place.x = width - 120\r\n        place.y = sprite_height + 10\r\n        sc.blit(text, place)\r\n\r\n    def generate_level(level):\r\n        Sky()\r\n        Ground()\r\n        px, py = 0, 0\r\n        for y in range(len(level)):\r\n            for x in range(len(level[y])):\r\n                if level[y][x] == '@':\r\n                    px, py = x, y\r\n                elif level[y][x] == '*':\r\n                    Money(x, y)\r\n                elif level[y][x] == 'w':\r\n                    Wall(x, y)\r\n                elif level[y][x] == 'k':\r\n                    KillerWall(x, y)\r\n                elif level[y][x] == 'g':\r\n                    GroundBlock(x, y)\r\n        return Player(px, py)\r\n\r\n    class Sky(pygame.sprite.Sprite):\r\n        def __init__(self):\r\n            super().__init__(all_sprites, wall_group)\r\n            self.image = other_image['sky']\r\n            self.rect = self.image.get_rect().move(0, 0)\r\n\r\n    class Ground(pygame.sprite.Sprite):\r\n        def __init__(self):\r\n            super().__init__(all_sprites, wall_group)\r\n            self.image = other_image['ground']\r\n            self.rect = self.image.get_rect().move(0, height - sprite_height)\r\n\r\n    class GroundBlock(pygame.sprite.Sprite):\r\n        def __init__(self, pos_x, pos_y):\r\n            super().__init__(all_sprites, move_sprites, wall_group)\r\n            self.image = other_image['groundblock']\r\n            self.rect = self.image.get_rect().move((pos_x + 1) * sprite_width, (pos_y + 1) * sprite_height + 40)\r\n\r\n        def update(self, *args):\r\n            if self.rect.x <= - self.rect.w:\r\n                self.kill()\r\n\r\n    class KillerWall(pygame.sprite.Sprite):\r\n        def __init__(self, pos_x, pos_y):\r\n            super().__init__(all_sprites, killer_group, move_sprites)\r\n            self.image = other_image['kwall']\r\n            self.rect = self.image.get_rect().move((pos_x + 1) * sprite_width, (pos_y + 1) * sprite_height)\r\n\r\n        def update(self, *args):\r\n            if self.rect.x <= - self.rect.w:\r\n                self.kill()\r\n\r\n    class Wall(pygame.sprite.Sprite):\r\n        def __init__(self, pos_x, pos_y):\r\n            super().__init__(all_sprites, move_sprites, wall_group)\r\n            self.image = other_image['wall']\r\n            self.rect = self.image.get_rect().move((pos_x + 1) * sprite_width, (pos_y + 1) * sprite_height)\r\n\r\n        def update(self, *args):\r\n            if self.rect.x <= - self.rect.w:\r\n                self.kill()\r\n\r\n    class Money(pygame.sprite.Sprite):\r\n        def __init__(self, pos_x, pos_y):\r\n            super().__init__(all_sprites, money_group, move_sprites)\r\n            # счётчик итераций для анимации\r\n            self.cnt = 0\r\n            self.now_image_idx = 0\r\n            self.image = money_image[self.now_image_idx]\r\n            self.rect = self.image.get_rect().move((pos_x + 1) * sprite_width, (pos_y + 1) * sprite_height)\r\n\r\n        def update(self, *args):\r\n            self.cnt += 1\r\n            if self.rect.x <= - self.rect.w:\r\n                self.kill()\r\n            if self.cnt == 10:\r\n                self.now_image_idx = (self.now_image_idx + 1) % 6\r\n                self.image = money_image[self.now_image_idx]\r\n                self.cnt = 0\r\n\r\n    class Player(pygame.sprite.Sprite):\r\n        def __init__(self, pos_x, pos_y):\r\n            super().__init__(all_sprites, player_group, move_sprites)\r\n            self.now_image = 0\r\n            self.image = player_image[0]\r\n            self.rect = self.image.get_rect().move((pos_x + 1) * sprite_width,\r\n                                                   (pos_y + 1) * sprite_height)\r\n            self.width = self.image.get_width()\r\n            self.height = self.image.get_height()\r\n            self.prew_x = self.rect.x\r\n            self.cnt_live = 3\r\n            self.cnt_of_money = 0\r\n            self.v = 0\r\n            self.cnt = 0\r\n            self.gravity = 1\r\n            self.jumping = False\r\n            self.kill_this = False\r\n            self.killers = []\r\n\r\n        def update(self, *args):\r\n            self.prew_x = self.rect.x\r\n            dx, dy = 0, 0\r\n\r\n            dx = 5\r\n            key = pygame.key.get_pressed()\r\n            if key[pygame.K_SPACE] and not self.jumping:\r\n                self.v = -20\r\n                self.jumping = True\r\n            if not key[pygame.K_SPACE]:\r\n                self.jumping = False\r\n            # \"притяжение\" персонажа к земле при прыжке\r\n            self.v += self.gravity\r\n            if self.v > 10:\r\n                self.v = 10\r\n            dy += self.v\r\n\r\n            # проверка столкновений со стенами:\r\n            # блоками, не наносящими урона, землёй и небом, блоками земли\r\n            for tile in wall_group:\r\n                rectangle = tile.rect  # прямоугольник объекта\r\n                # проверка столкновений по x\r\n                if rectangle.colliderect(self.rect.x + dx, self.rect.y, self.width, self.height):\r\n                    dx = 0\r\n\r\n                # проверка столкновений в координате y\r\n                if rectangle.colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):\r\n                    # блок над игроком, игрок двигается вверх\r\n                    if self.v < 0:\r\n                        dy = rectangle.bottom - self.rect.top\r\n                        self.v = 0\r\n                    # блок под игроком, игрок падает на него\r\n                    elif self.v >= 0:\r\n                        dy = rectangle.top - self.rect.bottom\r\n                        self.v = 0\r\n\r\n            self.rect.x += dx\r\n            self.rect.y += dy\r\n\r\n            if self.rect.bottom > height - sprite_height:\r\n                self.rect.bottom = height - sprite_height\r\n                dy = 0\r\n\r\n            # анимация\r\n            if self.cnt == 10:\r\n                self.now_image = (self.now_image + 1) % 2\r\n                self.image = player_image[self.now_image]\r\n                self.cnt = 0\r\n            self.cnt += 1\r\n\r\n            # проверка столкновений с монетами\r\n            for money in money_group:\r\n                money_rect = money.rect\r\n                if money_rect.colliderect(self.rect):\r\n                    money.kill()\r\n                    self.cnt_of_money += 1\r\n\r\n            # проверка столкновений с \"убийцами\"\r\n            # один убийца может нанести урон только один раз\r\n            for killer in killer_group:\r\n                killer_rect = killer.rect\r\n                if killer not in self.killers and killer_rect.colliderect(self.rect):\r\n                    self.cnt_live -= 1\r\n                    self.killers.append(killer)\r\n\r\n            # проверка столкновений с \"монстром\"\r\n            for monster in monster_group:\r\n                monster_rect = monster.rect\r\n                if monster_rect.colliderect(self.rect):\r\n                    self.kill_this = True\r\n\r\n        def return_live(self):\r\n            return self.cnt_live\r\n\r\n        def return_coors(self):\r\n            x, y = self.rect.x, self.rect.y\r\n            return x, y, self.prew_x\r\n\r\n        def return_money_cnt(self):\r\n            return self.cnt_of_money\r\n\r\n        def return_kill(self):\r\n            return self.kill_this\r\n\r\n    class Monster(pygame.sprite.Sprite):\r\n        def __init__(self, k_x, k_y):\r\n            super().__init__(monster_group)\r\n            self.images = [other_image['monster'], other_image['monster2']]\r\n            self.image = self.images[0]\r\n            self.cnt_image = 0\r\n            self.now_image = 0\r\n            self.rect = self.image.get_rect()\r\n            self.rect.x = k_x\r\n            self.rect.y = k_y\r\n            self.delta = 0\r\n            self.delta_move = 5\r\n\r\n        def update(self, p_x, p_y, prew_x):\r\n            if self.cnt_image > 10:\r\n                self.cnt_image = 0\r\n                self.now_image = (self.now_image + 1) % 2\r\n                self.image = self.images[self.now_image]\r\n            self.delta = p_x - self.rect.x\r\n            if prew_x != p_x:\r\n                self.rect.x = p_x - self.delta\r\n                self.rect.y = p_y\r\n            else:\r\n                self.rect.x += 5\r\n                self.rect.y = p_y\r\n            self.cnt_image += 1\r\n\r\n    class Hearts:\r\n        def __init__(self, k_x, k_y, n):\r\n            self.n = n\r\n            self.k_x = k_x\r\n            self.k_y = k_y\r\n            self.image_1 = pygame.transform.scale(other_image['live_yes'], (30, 30))\r\n            self.image_2 = pygame.transform.scale(other_image['live_no'], (30, 30))\r\n            #self.rect = self.image_1.get_rect().move(k_x + (sprite_width + 10) * (n + 1), k_y)\r\n\r\n        def update(self, check_n):\r\n            if self.n == check_n:\r\n                self.image_1 = self.image_2\r\n            screen.blit(self.image_1, (self.k_x + (30 + 10) * (self.n + 1), self.k_y))\r\n\r\n    # класс камеры будет управлять объектами, отслеживая игрока по координате x\r\n    class Camera:\r\n        def __init__(self):\r\n            self.dx = 0\r\n\r\n        def apply(self, obj):\r\n            obj.rect.x += self.dx\r\n\r\n        def update(self, target):\r\n            self.dx = -(target.rect.x + target.rect.w // 2 - width // 2)\r\n\r\n    play = True\r\n    clock = pygame.time.Clock()\r\n    player = generate_level(load_level(0))\r\n    camera = Camera()\r\n    monster = Monster(0, 480)\r\n    for i in range(3):\r\n        hearts_list.append(Hearts(width - 160, sprite_height * 1.8, i))\r\n\r\n    while play:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                pygame.quit()\r\n                exit()\r\n        all_sprites.update()\r\n        px, py, prewx = player.return_coors()\r\n        monster.update(px, py, prewx)\r\n        camera.update(player)\r\n        for sprite in move_sprites:\r\n            camera.apply(sprite)\r\n        #screen.fill((220, 24, 84))\r\n        screen.fill((87, 136, 179))\r\n        all_sprites.draw(screen)\r\n        monster_group.draw(screen)\r\n        generate_text(player.return_money_cnt(), screen)\r\n        cnt_of_live = player.return_live()\r\n        for heart in hearts_list:\r\n            heart.update(cnt_of_live)\r\n        play = bool(cnt_of_live) and not player.return_kill()\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\ngame()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main_cycle.py b/main_cycle.py
--- a/main_cycle.py	(revision 8f0d5e96fae1cac135b2c00536cdfd878284a80f)
+++ b/main_cycle.py	(date 1707419062768)
@@ -297,6 +297,7 @@
     for i in range(3):
         hearts_list.append(Hearts(width - 160, sprite_height * 1.8, i))
 
+
     while play:
         for event in pygame.event.get():
             if event.type == pygame.QUIT:
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from data.menu_data.component import *\r\nfrom const import *\r\nimport pygame\r\nfrom menu import *\r\n\r\npygame.init()\r\nscreen = pygame.display.set_mode((WIDCH, HENGT))\r\nmenu = Menu(screen)\r\n\r\n\r\nwith open(\"data//sprite//main_NPC\", \"r\") as f:\r\n    name_NPC = f.readline().strip()\r\nif not name_NPC:\r\n    name_NPC = \"Dino\"\r\n\r\nif menu.one_window():\r\n    while True:\r\n        answer = menu.main_window(name=name_NPC)\r\n        if answer == \"shop\":\r\n            menu.shop()\r\n        elif answer == \"typesDino\":\r\n            menu.typesDino()\r\n        elif answer == \"game\":\r\n            pass\r\n        with open(\"data//sprite//main_NPC\", \"r\") as f:\r\n            name_NPC = f.readline().strip()\r\n        if not name_NPC:\r\n            with open(\"data//sprite//main_NPC\", \"w\") as f:\r\n                f.write(\"Dino\")\r\n            name_NPC = \"Dino\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 8f0d5e96fae1cac135b2c00536cdfd878284a80f)
+++ b/main.py	(date 1707419062760)
@@ -2,6 +2,7 @@
 from const import *
 import pygame
 from menu import *
+from main_cycle import *
 
 pygame.init()
 screen = pygame.display.set_mode((WIDCH, HENGT))
@@ -21,7 +22,7 @@
         elif answer == "typesDino":
             menu.typesDino()
         elif answer == "game":
-            pass
+            game()
         with open("data//sprite//main_NPC", "r") as f:
             name_NPC = f.readline().strip()
         if not name_NPC:
